#!/usr/bin/env python
import yaml
import requirement
import document
import tracking
import argparse
import pprint
import os.path

def find_qwerkfile(curdir):
    '''
    Recursively search for a Qwerkfile.
    '''
    if not curdir:
        return (None, None)
    qfilename = os.path.join(curdir, "Qwerkfile")
    if os.path.exists(qfilename):
        return (curdir, qfilename)
    else:
        splitpath = os.path.split(curdir)
        if not splitpath[1]:
            return (None, None)
        return find_qwerkfile(os.path.split(curdir)[0])

def load_qwerkfile():
    '''
    Load the current Qwerkfile. Fixes up relative paths to absolute.
    '''
    qwerkfile = find_qwerkfile(os.path.abspath("."))

    if not qwerkfile[1]:
        return None

    qwerk_yml = None
    with open(qwerkfile[1], 'r') as qf:
        qwerk_yml = yaml.load(qf.read())
        qwerk_yml['req_dir'] = os.path.join(qwerkfile[0], qwerk_yml['req_dir'])
        qwerk_yml['output_dir'] = os.path.join(qwerkfile[0], qwerk_yml['output_dir'])
    return qwerk_yml

def parse_project(qf_yml):
    '''
    Parse the whole project.
    '''
    state = requirement.ProjectState(qf_yml['project_name'])
    state.load_all_from_root(qf_yml['req_dir'])
    return state

def load_project():
    '''
    Load the project referred to by the current Qwerkfile.
    '''
    qf = load_qwerkfile()
    if not qf:
        print("Error: no Qwerkfile found. Not a qwerk project.")
        exit()
    return (parse_project(qf), qf)
    
def do_identity(args):
    '''
    Run identity commands.
    '''
    if args.command == 'new':
        tracking.new_identity()
    if args.command == 'join':
        qf = load_qwerkfile()
        if not qf:
            print("Error: no Qwerkfile found, no project to join.")
            exit()
        tracking.join_project(qf['req_dir'])

def do_gen(args):
    '''
    Run document generation commands.
    '''
    state, qf = load_project()
    if args.type in ['all', 'dot']:
        dep_file = os.path.join(qf['output_dir'], "{0}_Requirements_Dependency.dot".format(qf['project_name']))
        with open(dep_file, 'w') as dep_file:
            outlines = state.dotify_project()
            dep_file.write("\n".join(outlines))
    if args.type in ['all', 'md']:
        doc_file = os.path.join(qf['output_dir'], "{0}_Requirements.md".format(qf['project_name']))
        with open(doc_file, 'w') as doc_file:
            outlines = document.format_project(state)
            doc_file.write("\n".join(outlines))
    
def do_sign(args):
    '''
    Sign requirements.
    '''
    state, qf = load_project()
    a = tracking.Authority()
    a.sign_requirement(state, args.requirement, args.type)
    pass

def do_checksig(args):
    '''
    Check signatures on requirements.
    '''
    state, qf = load_project()
    if not args.requirements:
        args.requirements = state.requirements.keys()
    for r in args.requirements:
        check_okay = tracking.check_sigs(state, r)
        print "{0}: {1}".format(r, "Okay" if check_okay else "FAILED!")
    
def do_init(args):
    '''
    Initialize a new Qwerkfile.
    '''
    to_write = {}
    to_write['project_name'] = args.project_name
    req_dir = to_write['req_dir'] = os.path.relpath(args.req_dir)
    out_dir = to_write['output_dir'] = os.path.relpath(args.doc_dir)
    with open('Qwerkfile', 'w') as f:
        yaml.dump(to_write, f)
    
    if not os.path.exists(req_dir):
        try:
            os.makedirs(os.path.join(req_dir, "Core"))
            os.makedirs(os.path.join(req_dir, "backlog", "Core"))
        except:
            print("Directories exist.")
            pass
    
    if not os.path.exists(to_write['output_dir']):
        try:
            os.makedirs(to_write['output_dir'])
        except:
            print("Directories exist.")
            pass

def do_new_req(args):
    '''
    Create a new requirement.
    '''
    state, qf = load_project()
    requirement.new_requirement(state, args.category, args.req_name, args.dependencies)

# argument parsing        
args_parser = argparse.ArgumentParser(description = "Manage requirements.")
subparsers = args_parser.add_subparsers(help = "Subcommand help.")

init_parser = subparsers.add_parser("init", help="Initialize new project by defining Qwerkfile in current directory.")
init_parser.add_argument("project_name", type=str, help="The new project's name.")
init_parser.add_argument("req_dir", type=str, help="Requirements directory (which may not exist, but will be created).")
init_parser.add_argument("doc_dir", type=str, help="Socuments output directory (which may not exist, but will be created).")
init_parser.set_defaults(func=do_init)

id_parser = subparsers.add_parser("id", help="Manage identity.")
id_parser.add_argument("command", choices=['new', 'join'], help="What command to run. 'new' for a new identity, \
                       'join' to add your existing id to the current project.")
id_parser.set_defaults(func=do_identity)

doc_parser = subparsers.add_parser("doc", help="Generate documents.")
doc_parser.add_argument("-t", "--type", type=str, default='all', choices=['all', 'dot', 'md'], help="Which document type to generate.")
doc_parser.set_defaults(func=do_gen)

sign_parser = subparsers.add_parser("sign", help="Sign off on requirements.")
sign_parser.add_argument("type", type=str, choices=['completed', 'reviewed'], help="Type of signature to apply.")
sign_parser.add_argument("requirement", type=str, help="Name of the requirement to sign.")
sign_parser.set_defaults(func=do_sign)

check_parser = subparsers.add_parser("checksig", help="Check signatures.")
check_parser.add_argument("requirements", nargs="*", type=str, help="Which requirement to check signatures on. Leave blank to check all.")
check_parser.set_defaults(func=do_checksig)

new_parser = subparsers.add_parser("new", help="Create new requirement.")
new_parser.add_argument("category", type=str, help="The category in which to create the new requirement.")
new_parser.add_argument("req_name", type=str, help="The name of the new requirement.")
new_parser.add_argument("dependencies", type=str, nargs="*", help="Zero or more requirements on which the new one depends.")
new_parser.set_defaults(func=do_new_req)

args = args_parser.parse_args()
args.func(args)