#!/usr/bin/env python
import yaml
import requirement
import document
import argparse
import pprint
import os.path

def find_qwerkfile(curdir):
    if not curdir:
        return (None, None)
    qfilename = os.path.join(curdir, "Qwerkfile")
    if os.path.exists(qfilename):
        return (curdir, qfilename)
    else:
        splitpath = os.path.split(curdir)
        if not splitpath[1]:
            return (None, None)
        return find_qwerkfile(os.path.split(curdir)[0])

args_parser = argparse.ArgumentParser(description = "Manage requirements, generates documents.")
args_parser.add_argument('-d', '--dependencies', action='store_const', const=True, default=False, help="Produce the dependency dot graph file.")
args_parser.add_argument('-o', '--document', action='store_const', const=True, default=False, help="Produce the requirements markdown document.")
args_parser.add_argument('-g', '--dump', action='store_const', const=True, default=False, help="Print a bunch of diagnostics and project state.")
args = args_parser.parse_args()


qwerkfile = find_qwerkfile(os.path.abspath("."))

if not qwerkfile[1]:
    print "Cannot find Qwerkfile in any parent directory. Is this a qwerk project?"
    exit()

qwerk_yml = None
with open(qwerkfile[1], 'r') as qf:
    qwerk_yml = yaml.load(qf.read())

reqs_root = os.path.join(qwerkfile[0], qwerk_yml['req_dir'])
out_root = os.path.join(qwerkfile[0], qwerk_yml['output_dir'])

state = requirement.ProjectState(qwerk_yml['project_name'])

state.load_all_from_root(reqs_root)

if args.dump:
    state.dump_reqs()

if args.dependencies:
    dep_file = os.path.join(out_root, "{0}_Requirements_Dependency.dot".format(qwerk_yml['project_name']))
    with open(dep_file, 'w') as dep_file:
        outlines = state.dotify_project()
        dep_file.write("\n".join(outlines))
    pass

if args.document:
    doc_file = os.path.join(out_root, "{0}_Requirements.md".format(qwerk_yml['project_name']))
    with open(doc_file, 'w') as doc_file:
        outlines = document.format_project(state)
        doc_file.write("\n".join(outlines))

